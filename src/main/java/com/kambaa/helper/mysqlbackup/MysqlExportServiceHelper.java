package com.kambaa.helper.mysqlbackup;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.stereotype.Component;

import com.mysql.cj.jdbc.MysqlDataSource;

@Component
public class MysqlExportServiceHelper {

	@Value("${database.mysql.driver.class}")
	private String mysqlDriverName;
	
	@Value("${database.backup.maximum.table}")
	Long maximumTablesConfig;
	
	@Value("${database.backup.maximum.row.pertable}")
	Long maximumRowPerTable;
	
	@Value("${database.backup.location}")
	String backupLocation;
	
	
	static final String SQL_START_PATTERN = "-- START MYSQL BACKUP FOR ";
    static final String SQL_END_PATTERN = "-- END MYSQL BACKUP FOR ";
	

	private static final Logger logger = LoggerFactory.getLogger(MysqlExportServiceHelper.class);
	
		
	
	public MysqlDataSource createDatasource(String host, String databaseName, String username, String password) {
		try {
			MysqlDataSource dataSource = new MysqlDataSource();
			dataSource.setDatabaseName(databaseName);
			dataSource.setUser(username);
			dataSource.setPassword(password);
			dataSource.setServerName("localhost");
			return dataSource;
		}catch (Exception e) {
			logger.error("Error occured when create the datasource");
			return null;
		}
	}
	
	
	public JdbcTemplate createConnection(MysqlDataSource mysqlDataSource) {
		JdbcTemplate jdbcTemplate;
		try {
			jdbcTemplate=new JdbcTemplate(mysqlDataSource);
		}catch(Exception e){
			logger.error("Error occured when connection create :"+e);
			throw new IllegalArgumentException("Database connection failed");
		}
		return jdbcTemplate;		
	}
	
	public List<Map<String,String>> getAllTables(JdbcTemplate jdbcTemplate,String database){
		try {
			String sql="SELECT table_name, table_rows FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ?;";
			List<Map<String,String>> lisTableResult=jdbcTemplate.query(sql,new Object[] {database},new ResultSetExtractor<List<Map<String,String>>>() {		
				@Override
				public List<Map<String, String>> extractData(ResultSet row) throws SQLException, DataAccessException {
					List<Map<String,String>> listRow=new LinkedList<>();
					while(row.next()) {
						Map<String,String> mapString=new LinkedHashMap<>();
						mapString.put("TABLE",row.getString("table_name"));
						mapString.put("ROW",row.getString("table_rows"));
						listRow.add(mapString);
					}
					return listRow;
				}
			});
			return lisTableResult;
		}catch (Exception e) {
			logger.error("Error occured when getting the all Table list :"+e);
			return null;
		}
	}
	
	public File getBackupFile(Long userid,Long taskid,String databaseName) {
		try {
	         File file = new File(getBackupFolder(userid,taskid)+"/"+getSqlFilename(databaseName));
	         return file;
		}catch (Exception e) {
			logger.error("Error occured when create the backup file :"+e);
			throw new IllegalArgumentException("Backup File creation failed");
		}
	}
	
	String getBackupFolder(Long userid,Long taskid) {
		try {
			File file=new File(backupLocation+""+userid+"/"+taskid);
			if(file.exists()&& file.isDirectory()) {
				return file.getAbsolutePath();
			}else {
				if(file.mkdirs())
					return file.getAbsolutePath();
				else {
					throw new IllegalArgumentException("Backup file creation failed");
				}
			}
		}catch (Exception e) {
			throw new IllegalArgumentException("Backup file creation failed");
		}
	}
	

	public String getSqlFilename(String databaseName) {
		return databaseName +"_dump_"+new SimpleDateFormat("Y_M_d_H_mm_ss").format(new Date())+".sql";
	}

		
	static List<String> getAllTables(String database, Statement stmt) throws SQLException {
        List<String> table = new ArrayList<>();
        ResultSet rs;
        rs = stmt.executeQuery("SHOW TABLE STATUS FROM `" + database + "`;");
        while ( rs.next() ) {
            table.add(rs.getString("Name"));
        }
        return table;
    }
	
	public boolean writeBackupHeader(FileOutputStream fileWriter) {
		try {
			StringBuilder  sql = new StringBuilder();
			sql.append("--");
	        sql.append("\n-- Generated By Kambaa MYSQL Backup Scheduler");
	        sql.append("\n-- https://github.com/logavdm/mysqlbackup");
	        sql.append("\n-- Date: ").append(new SimpleDateFormat("d-M-Y H:m:s").format(new Date()));
	        sql.append("\n--");
	        fileWriter.write(sql.toString().getBytes());
			return true;
		}catch (Exception e) {
			logger.error("Error occured when write the backup file header :"+e);
			return false;
		}
	}
	
	
	public boolean writeCreateTableQuery(JdbcTemplate jdbcTemplate,FileOutputStream fileWriter,String tableName){
		try {
			String sql="show CREATE table demo;";
			String query=jdbcTemplate.query(sql,new Object[] {},new ResultSetExtractor<String>() {
				@Override
				public String extractData(ResultSet row) throws SQLException, DataAccessException {
					String query="";
					while(row.next()) {
						query+=row.getString("Create Table");
					}
					return query;
				}
			});
			fileWriter.write(query.getBytes());
			return true;
		}catch (Exception e) {
			logger.error("Error occured when write table create statement :"+e);
			return false;
		}
	}
	
	
//	private String getTableInsertStatement(String table,Statement stmt) throws SQLException {
//		StringBuilder sql = new StringBuilder();
//		ResultSet rs;
//		if (table != null && !table.isEmpty()) {
//			rs = stmt.executeQuery("SHOW CREATE TABLE " + "`" + table + "`;");
//			while (rs.next()) {
//				String qtbl = rs.getString(1);
//				String query = rs.getString(2);
//				sql.append("\n\n--");
//				sql.append("\n").append(SQL_START_PATTERN).append("  table dump : ").append(qtbl);
//				sql.append("\n--\n\n");
//				query = query.trim().replace("CREATE TABLE", "CREATE TABLE IF NOT EXISTS");
//				sql.append(query).append(";\n\n");
//			}
//
//			sql.append("\n\n--");
//			sql.append("\n").append(SQL_END_PATTERN).append("  table dump : ").append(table);
//			sql.append("\n--\n\n");
//		}
//		return sql.toString();
//	}
	
	
	
}
